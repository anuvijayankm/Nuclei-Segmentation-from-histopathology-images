
#to validate the model using matrix
truth = ground_truth
result = prediction
FP = len(np.where(result - truth  == 1)[0])
FN = len(np.where(result - truth  == -1)[0])
TP = len(np.where(result + truth >1)[0])
TN = len(np.where(result + truth == 0)[0])
cmat = [[TP, FN], [FP, TN]]
plt.figure(figsize = (6,6))
sns.heatmap(cmat/np.sum(cmat), cmap="Reds", annot=True, fmt = '.2%', square=1,   linewidth=2.)
plt.xlabel("predictions")
plt.ylabel("real values")
plt.show()

# print(TP)
# print(FP)
# print(TN)
# print(FN)
ACCURACY = (TP+TN)/((TP+FP+TN+FN))
PRECISION = TP/(TP+FP)
RECALL = TP/(TP+FN)
F1_SCORE = 2*TP/(2*TP+FN+FP)
print("Accuracy= ",ACCURACY*100)
print("Precision= ",PRECISION*100)
print("Recall = ",RECALL*100)
print("F1_score = ",F1_SCORE*100)


########################################################
def dice_coef(y_true, y_pred):
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (2.0 * intersection + 1.0) / (K.sum(y_true_f) + K.sum(y_pred_f) + 1.0)


def jacard_coef(y_true, y_pred):
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (intersection + 1.0) / (K.sum(y_true_f) + K.sum(y_pred_f) - intersection + 1.0)


def jacard_coef_loss(y_true, y_pred):
    return -jacard_coef(y_true, y_pred)


def dice_coef_loss(y_true, y_pred):
    return -dice_coef(y_true, y_pred)
