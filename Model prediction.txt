Reference_unet = unet_model.fit(x_train,y_train,batch_size=10,verbose=1,epochs=15,validation_data=(x_test,y_test))

#plot the training and validation accuracy and loss at each epoch
acc =Reference_unet.history['accuracy']
val_acc = Reference_unet.history['val_accuracy']
epochs = range(1,len(acc)+1)
plt.plot(epochs,acc,'y',label='Training accuracy')
plt.plot(epochs,val_acc,'r',label='Validation accuracy')
plt.title('Training and Validation accuracy for U-Net')
plt.xlabel('Epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

#plot the training and validation accuracy and loss at each epoch
loss =Reference_unet.history['loss']
val_loss = Reference_unet.history['val_loss']
epochs = range(1,len(loss)+1)
plt.plot(epochs,loss,'y',label='Training loss')
plt.plot(epochs,val_loss,'r',label='Validation loss')
plt.title('Training and Validation loss for U-Net')
plt.xlabel('Epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

unet_model.save('path') #to save trained model
#load the model
from keras.models import load_model

unet_model = load_model('path')
"""Unet model testing using test dataset from train test split"""
#test_img_number = random.randint(0, len(real_image)) #checking using test image
test_img = x_test[2]
ground_truth = y_test[2]
test_img_input=np.expand_dims(test_img,0)
print(test_img_input.shape)
prediction = (unet_model.predict(test_img_input)[0,:,:,0] >.5).astype(np.uint8)
print(prediction.shape)

plt.figure(figsize=(16,8))
plt.subplot(231)
plt.title('Testing Image')
plt.imshow(test_img[:,:,0], cmap='gray')
plt.subplot(232)
plt.title('Testing Mask')
plt.imshow(ground_truth[:,:,0],cmap='gray')
plt.subplot(233)
plt.title('Prediction on test image')
plt.imshow(prediction,cmap='gray')
plt.imsave('/content/drive/MyDrive/UNET/prediction/test[2]_segmented.png',prediction,cmap='gray')
plt.show
